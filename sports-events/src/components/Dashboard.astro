---
// Dashboard principal con sistema de pestaÃ±as
import { getEventsByDays } from '../utils/events.js';
import { get247Channels } from '../utils/channels.js';

// Cargar datos para mostrar contadores
const { eventsByDay } = await getEventsByDays();
const { totalChannels } = await get247Channels();

// Calcular total de eventos
const totalEvents = Object.values(eventsByDay).reduce((total, dayEvents) => total + dayEvents.length, 0);
---

<div class="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black">
  <!-- Header principal -->
  <div class="bg-gray-900/80 backdrop-blur-sm border-b border-gray-700/50 sticky top-0 z-50">
    <div class="container mx-auto px-4 py-4">
      <div class="flex items-center justify-between mb-4">
        <h1 class="font-['Orbitron'] text-3xl font-black bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
          NO VEO NADA
        </h1>
        <div class="text-sm text-gray-400">
          ðŸ”´ EN VIVO â€¢ HD Quality
        </div>
      </div>
      
      <!-- Sistema de pestaÃ±as -->
      <div class="flex space-x-1 bg-gray-800/50 p-1 rounded-xl border border-gray-700/50">
        <button 
          id="eventsTab"
          class="tab-button active flex-1 px-6 py-3 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2"
          data-tab="events"
        >
          <span class="text-xl">âš½</span>
          <span>Eventos Deportivos</span>
          <span id="eventsCount" class="bg-blue-500/20 text-blue-300 px-2 py-1 rounded-full text-xs">{totalEvents}</span>
        </button>
        <button 
          id="channelsTab"
          class="tab-button flex-1 px-6 py-3 rounded-lg font-semibold transition-all duration-300 flex items-center justify-center gap-2"
          data-tab="channels"
        >
          <span class="text-xl">ðŸ“º</span>
          <span>Canales 24/7</span>
          <span id="channelsCount" class="bg-purple-500/20 text-purple-300 px-2 py-1 rounded-full text-xs">{totalChannels}</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Contenido de las pestaÃ±as -->
  <div class="tab-content-container">
    <!-- PestaÃ±a de Eventos Deportivos -->
    <div id="eventsContent" class="tab-content active">
      <div id="eventsLoader" class="flex items-center justify-center py-20">
        <div class="text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p class="text-gray-400">Cargando eventos deportivos...</p>
        </div>
      </div>
    </div>

    <!-- PestaÃ±a de Canales 24/7 -->
    <div id="channelsContent" class="tab-content hidden">
      <div id="channelsLoader" class="flex items-center justify-center py-20">
        <div class="text-center">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-500 mx-auto mb-4"></div>
          <p class="text-gray-400">Cargando canales 24/7...</p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Variables globales
  let currentTab: string = 'events';
  let eventsLoaded: boolean = false;
  let channelsLoaded: boolean = false;

  document.addEventListener('DOMContentLoaded', function() {
    // Inicializar pestaÃ±as
    initializeTabs();
    
    // Cargar contenido inicial
    loadTabContent('events');
  });

  function initializeTabs(): void {
    const tabButtons = document.querySelectorAll('.tab-button');
    
    tabButtons.forEach((button) => {
      button.addEventListener('click', function(this: HTMLElement) {
        const tabName = this.getAttribute('data-tab');
        if (tabName && tabName !== currentTab) {
          switchTab(tabName);
        }
      });
    });
  }

  function switchTab(tabName: string): void {
    // Actualizar botones
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach((btn) => {
      btn.classList.remove('active');
    });
    
    const activeButton = document.querySelector(`[data-tab="${tabName}"]`);
    if (activeButton) {
      activeButton.classList.add('active');
    }

    // Actualizar contenido
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach((content) => {
      content.classList.add('hidden');
      content.classList.remove('active');
    });

    const activeContent = document.getElementById(`${tabName}Content`);
    if (activeContent) {
      activeContent.classList.remove('hidden');
      activeContent.classList.add('active');
    }

    // Actualizar tab actual
    currentTab = tabName;

    // Cargar contenido si no estÃ¡ cargado
    loadTabContent(tabName);

    // Mostrar notificaciÃ³n
    const tabTitle = tabName === 'events' ? 'Eventos Deportivos' : 'Canales 24/7';
    showNotification(`ðŸ“± Cambiado a: ${tabTitle}`, 'info');
  }

  async function loadTabContent(tabName: string): Promise<void> {
    if (tabName === 'events' && !eventsLoaded) {
      try {
        const response = await fetch('/SportsEvents');
        if (response.ok) {
          const html = await response.text();
          const eventsContent = document.getElementById('eventsContent');
          if (eventsContent) {
            eventsContent.innerHTML = html;
            eventsLoaded = true;
            
            // Re-ejecutar scripts del componente cargado
            const scripts = eventsContent.querySelectorAll('script');
            scripts.forEach(script => {
              const newScript = document.createElement('script');
              newScript.textContent = script.textContent;
              document.head.appendChild(newScript);
            });
          }
        } else {
          loadFallbackEvents();
        }
      } catch (error) {
        console.error('Error cargando eventos:', error);
        loadFallbackEvents();
      }
    } else if (tabName === 'channels' && !channelsLoaded) {
      try {
        const response = await fetch('/Channels');
        if (response.ok) {
          const html = await response.text();
          const channelsContent = document.getElementById('channelsContent');
          if (channelsContent) {
            channelsContent.innerHTML = html;
            channelsLoaded = true;
            
            // Re-ejecutar scripts del componente cargado
            const scripts = channelsContent.querySelectorAll('script');
            scripts.forEach(script => {
              const newScript = document.createElement('script');
              newScript.textContent = script.textContent;
              document.head.appendChild(newScript);
            });
          }
        } else {
          loadFallbackChannels();
        }
      } catch (error) {
        console.error('Error cargando canales:', error);
        loadFallbackChannels();
      }
    }
  }

  function loadFallbackEvents(): void {
    const eventsContent = document.getElementById('eventsContent');
    if (eventsContent) {
      eventsContent.innerHTML = `
        <div class="container mx-auto px-4 py-8">
          <div class="text-center py-20">
            <div class="text-6xl mb-4">âš½</div>
            <h2 class="text-2xl font-bold text-white mb-4">Eventos Deportivos</h2>
            <p class="text-gray-400 mb-6">Error al cargar el contenido</p>
            <button onclick="window.location.reload()" class="bg-blue-600 hover:bg-blue-700 px-6 py-3 rounded-lg font-semibold transition-colors">
              ðŸ”„ Recargar
            </button>
          </div>
        </div>
      `;
    }
  }

  function loadFallbackChannels(): void {
    const channelsContent = document.getElementById('channelsContent');
    if (channelsContent) {
      channelsContent.innerHTML = `
        <div class="container mx-auto px-4 py-8">
          <div class="text-center py-20">
            <div class="text-6xl mb-4">ðŸ“º</div>
            <h2 class="text-2xl font-bold text-white mb-4">Canales 24/7</h2>
            <p class="text-gray-400 mb-6">Error al cargar el contenido</p>
            <button onclick="window.location.reload()" class="bg-purple-600 hover:bg-purple-700 px-6 py-3 rounded-lg font-semibold transition-colors">
              ðŸ”„ Recargar
            </button>
          </div>
        </div>
      `;
    }
  }

  function showNotification(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
    const notification = document.createElement('div');
    notification.className = `fixed top-20 right-4 px-6 py-3 rounded-lg text-white font-medium z-50 transition-all duration-300 transform translate-x-full`;
    
    switch (type) {
      case 'success':
        notification.classList.add('bg-green-600');
        break;
      case 'error':
        notification.classList.add('bg-red-600');
        break;
      default:
        notification.classList.add('bg-blue-600');
    }
    
    notification.textContent = message;
    document.body.appendChild(notification);
    
    // Animar entrada
    setTimeout(() => {
      notification.classList.remove('translate-x-full');
    }, 100);
    
    // Animar salida y remover
    setTimeout(() => {
      notification.classList.add('translate-x-full');
      setTimeout(() => {
        if (document.body.contains(notification)) {
          document.body.removeChild(notification);
        }
      }, 300);
    }, 3000);
  }

  // Atajos de teclado
  document.addEventListener('keydown', function(e: KeyboardEvent) {
    if (e.ctrlKey || e.metaKey) {
      switch (e.key) {
        case '1':
          e.preventDefault();
          switchTab('events');
          break;
        case '2':
          e.preventDefault();
          switchTab('channels');
          break;
      }
    }
  });
</script>

<style>
  .tab-button {
    background: rgba(55, 65, 81, 0.5);
    color: #9CA3AF;
    border: 1px solid rgba(55, 65, 81, 0.3);
  }
  
  .tab-button.active {
    background: linear-gradient(135deg, #3B82F6, #8B5CF6);
    color: white;
    border: 1px solid rgba(59, 130, 246, 0.5);
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }
  
  .tab-button:hover:not(.active) {
    background: rgba(75, 85, 99, 0.7);
    color: #E5E7EB;
    border: 1px solid rgba(75, 85, 99, 0.5);
  }
  
  .tab-content {
    min-height: calc(100vh - 140px);
  }
  
  /* Animaciones de transiciÃ³n */
  .tab-content.active {
    animation: fadeIn 0.3s ease-in-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Efectos de glow */
  .tab-button.active {
    position: relative;
  }
  
  .tab-button.active::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #3B82F6, #8B5CF6, #EC4899);
    border-radius: inherit;
    z-index: -1;
    opacity: 0.7;
    filter: blur(8px);
  }
</style>