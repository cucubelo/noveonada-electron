---
import { getEventsByDays } from '../utils/events.js';

const { eventsByDay, categories } = await getEventsByDays();

// Función para limpiar el nombre del día
function cleanDayName(dayName: string): string {
  // Eliminar "- Schedule Time UK GMT" y variaciones similares
  return dayName
    .replace(/\s*-\s*Schedule\s+Time\s+UK\s+GMT.*$/i, '')
    .replace(/\s*-\s*Schedule.*$/i, '')
    .trim();
}

const categoryIcons = {
  'Soccer': { icon: '⚽', color: 'from-green-500 to-emerald-600', glow: 'glow-green' },
  'Basketball': { icon: '🏀', color: 'from-orange-500 to-red-600', glow: 'glow' },
  'Tennis': { icon: '🎾', color: 'from-yellow-500 to-green-600', glow: 'glow-green' },
  'Baseball': { icon: '⚾', color: 'from-blue-500 to-indigo-600', glow: 'glow' },
  'Ice Hockey': { icon: '🏒', color: 'from-cyan-500 to-blue-600', glow: 'glow' },
  'MMA': { icon: '🥊', color: 'from-red-500 to-pink-600', glow: 'glow' },
  'WWE': { icon: '🤼', color: 'from-purple-500 to-pink-600', glow: 'glow-purple' },
  'Motorsport': { icon: '🏎️', color: 'from-gray-500 to-red-600', glow: 'glow' },
  'PPV Events': { icon: '🎬', color: 'from-red-500 to-orange-600', glow: 'glow' },
  'TV Shows': { icon: '📺', color: 'from-blue-500 to-purple-600', glow: 'glow-purple' },
  'Cricket': { icon: '🏏', color: 'from-green-500 to-blue-600', glow: 'glow-green' },
  'Golf': { icon: '⛳', color: 'from-green-400 to-emerald-500', glow: 'glow-green' },
  'Volleyball': { icon: '🏐', color: 'from-yellow-400 to-orange-500', glow: 'glow' },
  'Cycling': { icon: '🚴', color: 'from-blue-400 to-cyan-500', glow: 'glow' },
  'Athletics': { icon: '🏃', color: 'from-red-400 to-pink-500', glow: 'glow' },
  'Water Sports': { icon: '🏊', color: 'from-blue-400 to-teal-500', glow: 'glow' },
  'Snooker': { icon: '🎱', color: 'from-gray-400 to-slate-600', glow: 'glow' },
  'Field Hockey': { icon: '🏑', color: 'from-green-400 to-lime-500', glow: 'glow-green' },
  'Bowling': { icon: '🎳', color: 'from-purple-400 to-indigo-500', glow: 'glow-purple' },
  'Squash': { icon: '🏓', color: 'from-orange-400 to-red-500', glow: 'glow' },
  'default': { icon: '🏆', color: 'from-blue-500 to-purple-600', glow: 'glow-purple' }
} as const;

type CategoryKey = keyof typeof categoryIcons;

// Calcular total de eventos
const totalEvents = Object.values(eventsByDay).reduce((total, dayEvents) => total + dayEvents.length, 0);
---

<div class="container mx-auto px-4 py-8">
  <!-- Header futurístico -->
  <div class="text-center mb-12">
    <div class="flex items-center justify-between mb-6">
      <div class="flex-1"></div>
      <h1 class="font-['Orbitron'] text-6xl font-black bg-gradient-to-r from-blue-400 via-purple-500 to-green-400 bg-clip-text text-transparent">
        NO VEO NADA
      </h1>
      <div class="flex-1 flex justify-end">
        <!-- Toggle para modo multi-reproductor -->
        <div class="flex items-center space-x-3 bg-gray-800/50 backdrop-blur-sm rounded-lg p-3 border border-gray-700/50">
          <span class="text-sm text-gray-300">Reproductor único</span>
          <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" id="multiPlayerToggle" class="sr-only peer" checked>
            <div class="w-11 h-6 bg-gray-600 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-800 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-purple-600"></div>
          </label>
          <span class="text-sm text-gray-300">Multi-reproductor</span>
          <div class="flex items-center space-x-1 text-xs text-gray-400">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
            <span>Múltiples ventanas</span>
          </div>
        </div>
      </div>
    </div>
    <div class="w-32 h-1 bg-gradient-to-r from-blue-500 to-purple-500 mx-auto mb-6 glow"></div>
    <p class="text-xl text-gray-300 font-light">
      Eventos deportivos en tiempo real • Sin publicidad • Tecnología avanzada
    </p>
  </div>

  <!-- Buscador y Filtros -->
  <div class="mb-8">
    <!-- Selector de zona horaria -->
    <div class="mb-6">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 max-w-4xl mx-auto">
        <!-- Selector de zona horaria -->
        <div>
          <label for="timezoneSelect" class="block text-center lg:text-left text-gray-400 text-sm mb-2">🌍 Zona horaria:</label>
          <select 
            id="timezoneSelect"
            class="w-full bg-gray-800/50 border border-gray-600/50 rounded-xl px-4 py-3 text-white focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200"
          >
            <!-- Europa -->
            <optgroup label="🇪🇺 Europa">
              <option value="Europe/London">🇬🇧 Reino Unido (GMT)</option>
              <option value="Europe/Madrid">🇪🇸 España (CET)</option>
              <option value="Europe/Paris">🇫🇷 Francia (CET)</option>
              <option value="Europe/Berlin">🇩🇪 Alemania (CET)</option>
              <option value="Europe/Rome">🇮🇹 Italia (CET)</option>
              <option value="Europe/Amsterdam">🇳🇱 Países Bajos (CET)</option>
              <option value="Europe/Brussels">🇧🇪 Bélgica (CET)</option>
              <option value="Europe/Zurich">🇨🇭 Suiza (CET)</option>
              <option value="Europe/Vienna">🇦🇹 Austria (CET)</option>
              <option value="Europe/Prague">🇨🇿 República Checa (CET)</option>
              <option value="Europe/Warsaw">🇵🇱 Polonia (CET)</option>
              <option value="Europe/Stockholm">🇸🇪 Suecia (CET)</option>
              <option value="Europe/Oslo">🇳🇴 Noruega (CET)</option>
              <option value="Europe/Copenhagen">🇩🇰 Dinamarca (CET)</option>
              <option value="Europe/Helsinki">🇫🇮 Finlandia (EET)</option>
              <option value="Europe/Athens">🇬🇷 Grecia (EET)</option>
              <option value="Europe/Bucharest">🇷🇴 Rumania (EET)</option>
              <option value="Europe/Budapest">🇭🇺 Hungría (CET)</option>
              <option value="Europe/Lisbon">🇵🇹 Portugal (WET)</option>
              <option value="Europe/Dublin">🇮🇪 Irlanda (GMT)</option>
              <option value="Europe/Moscow">🇷🇺 Moscú (MSK)</option>
            </optgroup>
            
            <!-- América del Norte -->
            <optgroup label="🇺���8 América del Norte">
              <option value="America/New_York">🇺���8 Nueva York (EST)</option>
              <option value="America/Chicago">🇺���8 Chicago (CST)</option>
              <option value="America/Denver">🇺���8 Denver (MST)</option>
              <option value="America/Los_Angeles">🇺���8 Los Ángeles (PST)</option>
              <option value="America/Anchorage">🇺���8 Alaska (AKST)</option>
              <option value="Pacific/Honolulu">🇺���8 Hawái (HST)</option>
              <option value="America/Toronto">🇨🇦 Toronto (EST)</option>
              <option value="America/Vancouver">🇨🇦 Vancouver (PST)</option>
              <option value="America/Montreal">🇨🇦 Montreal (EST)</option>
              <option value="America/Mexico_City">🇲🇽 Ciudad de México (CST)</option>
              <option value="America/Tijuana">🇲🇽 Tijuana (PST)</option>
              <option value="America/Cancun">🇲🇽 Cancún (EST)</option>
            </optgroup>
            
            <!-- América Central y Caribe -->
            <optgroup label="🌴 América Central y Caribe">
              <option value="America/Guatemala">🇬🇹 Guatemala (CST)</option>
              <option value="America/Belize">🇧🇿 Belice (CST)</option>
              <option value="America/Tegucigalpa">🇭🇳 Honduras (CST)</option>
              <option value="America/Managua">🇳🇮 Nicaragua (CST)</option>
              <option value="America/Costa_Rica">🇨🇷 Costa Rica (CST)</option>
              <option value="America/Panama">🇵🇦 Panamá (EST)</option>
              <option value="America/Havana">🇨🇺 Cuba (CST)</option>
              <option value="America/Jamaica">🇯🇲 Jamaica (EST)</option>
              <option value="America/Santo_Domingo">🇩🇴 República Dominicana (AST)</option>
              <option value="America/Puerto_Rico">🇵🇷 Puerto Rico (AST)</option>
            </optgroup>
            
            <!-- América del Sur -->
            <optgroup label="🌎 América del Sur">
              <option value="America/Sao_Paulo">🇧🇷 São Paulo (BRT)</option>
              <option value="America/Rio_de_Janeiro">🇧🇷 Río de Janeiro (BRT)</option>
              <option value="America/Manaus">🇧🇷 Manaus (AMT)</option>
              <option value="America/Argentina/Buenos_Aires">🇦🇷 Buenos Aires (ART)</option>
              <option value="America/Argentina/Cordoba">🇦🇷 Córdoba (ART)</option>
              <option value="America/Santiago">🇨🇱 Santiago (CLT)</option>
              <option value="America/Lima">🇵🇪 Lima (PET)</option>
              <option value="America/Bogota">🇨🇴 Bogotá (COT)</option>
              <option value="America/Caracas">🇻🇪 Caracas (VET)</option>
              <option value="America/La_Paz">🇧🇴 La Paz (BOT)</option>
              <option value="America/Asuncion">🇵🇾 Asunción (PYT)</option>
              <option value="America/Montevideo">🇺🇾 Montevideo (UYT)</option>
              <option value="America/Guyana">🇬🇾 Georgetown (GYT)</option>
              <option value="America/Paramaribo">🇸🇷 Paramaribo (SRT)</option>
              <option value="America/Cayenne">🇬🇫 Cayena (GFT)</option>
            </optgroup>
            
            <!-- Asia -->
            <optgroup label="🌏 Asia">
              <option value="Asia/Tokyo">🇯🇵 Tokio (JST)</option>
              <option value="Asia/Shanghai">🇨🇳 Shanghai (CST)</option>
              <option value="Asia/Hong_Kong">🇭🇰 Hong Kong (HKT)</option>
              <option value="Asia/Singapore">🇸🇬 Singapur (SGT)</option>
              <option value="Asia/Seoul">🇰🇷 Seúl (KST)</option>
              <option value="Asia/Taipei">🇹🇼 Taipéi (CST)</option>
              <option value="Asia/Bangkok">🇹🇭 Bangkok (ICT)</option>
              <option value="Asia/Jakarta">🇮🇩 Yakarta (WIB)</option>
              <option value="Asia/Manila">🇵🇭 Manila (PHT)</option>
              <option value="Asia/Kuala_Lumpur">🇲🇾 Kuala Lumpur (MYT)</option>
              <option value="Asia/Ho_Chi_Minh">🇻🇳 Ho Chi Minh (ICT)</option>
              <option value="Asia/Phnom_Penh">🇰🇭 Phnom Penh (ICT)</option>
              <option value="Asia/Vientiane">🇱🇦 Vientiane (ICT)</option>
              <option value="Asia/Yangon">🇲🇲 Yangón (MMT)</option>
              <option value="Asia/Dhaka">🇧🇩 Dhaka (BST)</option>
              <option value="Asia/Kolkata">🇮🇳 Mumbai (IST)</option>
              <option value="Asia/Karachi">🇵🇰 Karachi (PKT)</option>
              <option value="Asia/Kabul">🇦🇫 Kabul (AFT)</option>
              <option value="Asia/Tehran">🇮🇷 Teherán (IRST)</option>
              <option value="Asia/Dubai">🇦🇪 Dubái (GST)</option>
              <option value="Asia/Riyadh">🇸🇦 Riad (AST)</option>
              <option value="Asia/Kuwait">🇰🇼 Kuwait (AST)</option>
              <option value="Asia/Qatar">🇶🇦 Doha (AST)</option>
              <option value="Asia/Bahrain">🇧🇭 Manama (AST)</option>
              <option value="Asia/Baghdad">🇮🇶 Bagdad (AST)</option>
              <option value="Asia/Jerusalem">🇮🇱 Jerusalén (IST)</option>
              <option value="Asia/Beirut">🇱🇧 Beirut (EET)</option>
              <option value="Asia/Damascus">🇸🇾 Damasco (EET)</option>
              <option value="Asia/Amman">🇯🇴 Ammán (EET)</option>
              <option value="Asia/Yerevan">🇦🇲 Ereván (AMT)</option>
              <option value="Asia/Baku">🇦🇿 Bakú (AZT)</option>
              <option value="Asia/Tbilisi">🇬🇪 Tiflis (GET)</option>
              <option value="Asia/Almaty">🇰🇿 Almaty (ALMT)</option>
              <option value="Asia/Tashkent">🇺🇿 Taskent (UZT)</option>
              <option value="Asia/Bishkek">🇰🇬 Biskek (KGT)</option>
              <option value="Asia/Dushanbe">🇹🇯 Dusambé (TJT)</option>
              <option value="Asia/Ashgabat">🇹🇲 Asjabad (TMT)</option>
            </optgroup>
            
            <!-- África -->
            <optgroup label="🌍 África">
              <option value="Africa/Cairo">🇪🇬 El Cairo (EET)</option>
              <option value="Africa/Lagos">🇳🇬 Lagos (WAT)</option>
              <option value="Africa/Johannesburg">🇿🇦 Johannesburgo (SAST)</option>
              <option value="Africa/Nairobi">🇰🇪 Nairobi (EAT)</option>
              <option value="Africa/Casablanca">🇲🇦 Casablanca (WET)</option>
              <option value="Africa/Tunis">🇹🇳 Túnez (CET)</option>
              <option value="Africa/Algiers">🇩🇿 Argel (CET)</option>
              <option value="Africa/Tripoli">🇱🇾 Trípoli (EET)</option>
              <option value="Africa/Khartoum">🇸🇩 Jartum (CAT)</option>
              <option value="Africa/Addis_Ababa">🇪🇹 Addis Abeba (EAT)</option>
              <option value="Africa/Dar_es_Salaam">🇹🇿 Dar es Salaam (EAT)</option>
              <option value="Africa/Kampala">🇺🇬 Kampala (EAT)</option>
              <option value="Africa/Kigali">🇷🇼 Kigali (CAT)</option>
              <option value="Africa/Lusaka">🇿🇲 Lusaka (CAT)</option>
              <option value="Africa/Harare">🇿🇼 Harare (CAT)</option>
              <option value="Africa/Maputo">🇲🇿 Maputo (CAT)</option>
              <option value="Africa/Windhoek">🇳🇦 Windhoek (CAT)</option>
              <option value="Africa/Gaborone">🇧🇼 Gaborone (CAT)</option>
              <option value="Africa/Maseru">🇱🇸 Maseru (SAST)</option>
              <option value="Africa/Mbabane">🇸🇿 Mbabane (SAST)</option>
              <option value="Africa/Dakar">🇸🇳 Dakar (GMT)</option>
              <option value="Africa/Bamako">🇲🇱 Bamako (GMT)</option>
              <option value="Africa/Ouagadougou">🇧🇫 Uagadugú (GMT)</option>
              <option value="Africa/Abidjan">🇨🇮 Abiyán (GMT)</option>
              <option value="Africa/Accra">🇬🇭 Acra (GMT)</option>
              <option value="Africa/Lome">🇹🇬 Lomé (GMT)</option>
              <option value="Africa/Porto-Novo">🇧🇯 Porto-Novo (WAT)</option>
              <option value="Africa/Niamey">🇳🇪 Niamey (WAT)</option>
              <option value="Africa/Ndjamena">🇹🇩 Yamena (WAT)</option>
              <option value="Africa/Bangui">🇨🇫 Bangui (WAT)</option>
              <option value="Africa/Libreville">🇬🇦 Libreville (WAT)</option>
              <option value="Africa/Malabo">🇬🇶 Malabo (WAT)</option>
              <option value="Africa/Douala">🇨🇲 Duala (WAT)</option>
              <option value="Africa/Kinshasa">🇨🇩 Kinshasa (WAT)</option>
              <option value="Africa/Brazzaville">🇨🇬 Brazzaville (WAT)</option>
              <option value="Africa/Luanda">🇦🇴 Luanda (WAT)</option>
            </optgroup>
            
            <!-- Oceanía -->
            <optgroup label="🇦🇺 Oceanía">
              <option value="Australia/Sydney">🇦🇺 Sídney (AEDT)</option>
              <option value="Australia/Melbourne">🇦🇺 Melbourne (AEDT)</option>
              <option value="Australia/Brisbane">🇦🇺 Brisbane (AEST)</option>
              <option value="Australia/Perth">🇦🇺 Perth (AWST)</option>
              <option value="Australia/Adelaide">🇦🇺 Adelaida (ACDT)</option>
              <option value="Australia/Darwin">🇦🇺 Darwin (ACST)</option>
              <option value="Australia/Hobart">🇦🇺 Hobart (AEDT)</option>
              <option value="Pacific/Auckland">🇳🇿 Auckland (NZDT)</option>
              <option value="Pacific/Fiji">🇫🇯 Suva (FJT)</option>
              <option value="Pacific/Tahiti">🇵🇫 Tahití (TAHT)</option>
              <option value="Pacific/Noumea">🇳🇨 Numea (NCT)</option>
              <option value="Pacific/Port_Moresby">🇵🇬 Port Moresby (PGT)</option>
              <option value="Pacific/Vanuatu">🇻🇺 Port Vila (VUT)</option>
              <option value="Pacific/Guadalcanal">🇸🇧 Honiara (SBT)</option>
              <option value="Pacific/Palau">🇵🇼 Koror (PWT)</option>
              <option value="Pacific/Yap">🇫🇲 Yap (CHUT)</option>
              <option value="Pacific/Chuuk">🇫🇲 Chuuk (CHUT)</option>
              <option value="Pacific/Pohnpei">🇫🇲 Pohnpei (PONT)</option>
              <option value="Pacific/Kosrae">🇫🇲 Kosrae (KOST)</option>
              <option value="Pacific/Majuro">🇲🇭 Majuro (MHT)</option>
              <option value="Pacific/Kwajalein">🇲🇭 Kwajalein (MHT)</option>
              <option value="Pacific/Nauru">🇳🇷 Yaren (NRT)</option>
              <option value="Pacific/Funafuti">🇹🇻 Funafuti (TVT)</option>
              <option value="Pacific/Tarawa">🇰🇮 Tarawa (GILT)</option>
              <option value="Pacific/Wake">🇺���2 Wake (WAKT)</option>
              <option value="Pacific/Wallis">🇼🇫 Mata-Utu (WFT)</option>
              <option value="Pacific/Apia">🇼���8 Apia (WST)</option>
              <option value="Pacific/Tongatapu">🇹🇴 Nuku'alofa (TOT)</option>
            </optgroup>
          </select>
        </div>
        
        <!-- Barra de búsqueda -->
        <div>
          <label class="block text-center lg:text-left text-gray-400 text-sm mb-2">🔍 Buscar eventos:</label>
          <div class="relative">
            <input 
              type="text" 
              id="searchInput"
              placeholder="Buscar eventos..."
              class="w-full bg-gray-800/50 border border-gray-600/50 rounded-xl px-4 py-3 pl-12 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500/20 transition-all duration-200"
            >
            <div class="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400">
              🔍
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Panel de filtros colapsable -->
    <div class="bg-gray-800/30 border border-gray-700/50 rounded-xl p-6 mb-6">
      <!-- Header de filtros -->
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-300 flex items-center gap-2">
          🎯 Filtros
        </h3>
        <button 
          id="toggleFilters"
          class="bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600/30 px-3 py-1 rounded-lg text-sm transition-all duration-200 flex items-center gap-2"
        >
          <span id="filterToggleText">Ocultar</span>
          <span id="filterToggleIcon" class="transform transition-transform duration-200">▲</span>
        </button>
      </div>

      <!-- Contenido de filtros -->
      <div id="filtersContent" class="space-y-4">
        <!-- Filtros por día (solo si hay más de 1 día) -->
        {Object.keys(eventsByDay).length > 1 && (
          <div>
            <h4 class="text-sm font-medium text-gray-400 mb-3 flex items-center gap-2">
              📅 Filtrar por día:
              <span class="text-xs bg-gray-700/50 px-2 py-1 rounded-full">{Object.keys(eventsByDay).length} días</span>
            </h4>
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-2">
              <button 
                class="day-filter-btn active bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 px-3 py-2 rounded-lg text-xs font-semibold transition-all duration-200 glow-green text-center"
                data-day="all"
              >
                📅 Todos
              </button>
              {Object.keys(eventsByDay).map((dayName) => {
                const cleanedDayName = cleanDayName(dayName);
                // Acortar el nombre del día para mejor visualización
                const shortDayName = cleanedDayName.split(' ').slice(0, 2).join(' ');
                return (
                  <button 
                    class="day-filter-btn bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600/30 px-3 py-2 rounded-lg text-xs font-semibold transition-all duration-200 glow-green text-center"
                    data-day={dayName}
                    title={cleanedDayName}
                  >
                    📅 {shortDayName}
                  </button>
                );
              })}
            </div>
          </div>
        )}

        <!-- Filtros por categoría -->
        <div>
          <h4 class="text-sm font-medium text-gray-400 mb-3 flex items-center gap-2">
            🏆 Filtrar por deporte:
            <span class="text-xs bg-gray-700/50 px-2 py-1 rounded-full">{categories.length} categorías</span>
          </h4>
          <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-6 gap-2">
            <button 
              class="filter-btn active bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 px-3 py-2 rounded-lg text-xs font-semibold transition-all duration-200 glow text-center"
              data-category="all"
            >
              🏆 Todos
            </button>
            {categories.map((cat) => {
              const categoryKey = cat as CategoryKey;
              const category = categoryIcons[categoryKey] || categoryIcons.default;
              return (
                <button 
                  class={`filter-btn bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600/30 px-3 py-2 rounded-lg text-xs font-semibold transition-all duration-200 ${category.glow} text-center`}
                  data-category={cat}
                  title={cat}
                >
                  <div class="flex flex-col items-center gap-1">
                    <span class="text-sm">{category.icon}</span>
                    <span class="text-xs leading-tight">{cat.length > 8 ? cat.substring(0, 8) + '...' : cat}</span>
                  </div>
                </button>
              );
            })}
          </div>
        </div>
      </div>
    </div>

    <!-- Contador de resultados y botón de limpiar filtros -->
    <div class="flex items-center justify-between text-sm">
      <div class="text-gray-400">
        <span id="resultsCount">{totalEvents}</span> eventos encontrados
      </div>
      <button 
        id="clearFilters"
        class="bg-gray-700/50 hover:bg-gray-600/50 border border-gray-600/30 px-3 py-1 rounded-lg text-xs transition-all duration-200 flex items-center gap-1"
      >
        🗑️ Limpiar filtros
      </button>
    </div>
  </div>

  <!-- Estadísticas en tiempo real -->
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
    <div class="hologram border border-blue-500/30 rounded-xl p-6 text-center glow">
      <div class="text-3xl font-bold text-blue-400" id="totalEvents">{totalEvents}</div>
      <div class="text-gray-400">Eventos Activos</div>
    </div>
    <div class="hologram border border-green-500/30 rounded-xl p-6 text-center glow-green">
      <div class="text-3xl font-bold text-green-400">{Object.keys(eventsByDay).length}</div>
      <div class="text-gray-400">Días Disponibles</div>
    </div>
    <div class="hologram border border-purple-500/30 rounded-xl p-6 text-center glow-purple">
      <div class="text-3xl font-bold text-purple-400">HD</div>
      <div class="text-gray-400">Calidad</div>
    </div>
  </div>

  <!-- Eventos separados por días -->
  {Object.entries(eventsByDay).map(([dayName, dayEvents]) => {
    const cleanedDayName = cleanDayName(dayName);
    return (
      <div class="day-section mb-12" data-day={dayName}>
        <!-- Header del día -->
        <div class="flex items-center mb-6">
          <div class="flex-1 h-px bg-gradient-to-r from-transparent via-blue-500 to-transparent"></div>
          <h2 class="mx-6 text-2xl font-bold text-blue-400 bg-gray-900 px-4 py-2 rounded-lg border border-blue-500/30">
            📅 {cleanedDayName}
          </h2>
          <div class="flex-1 h-px bg-gradient-to-r from-transparent via-blue-500 to-transparent"></div>
        </div>

      <!-- Grid de eventos del día -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 events-grid" data-day={dayName}>
        {dayEvents.map((event:any) => {
          const categoryKey = event.category as CategoryKey;
          const category = categoryIcons[categoryKey] || categoryIcons.default;
          return (
            <div 
              class={`event-card group relative overflow-hidden rounded-2xl bg-gradient-to-br from-gray-900/90 to-gray-800/90 backdrop-blur-sm border border-gray-700/50 hover:border-blue-500/70 transition-all duration-200 transform hover:scale-[1.02] hover:-translate-y-1 ${category.glow}`}
              data-channel-id={event.channelId}
              data-category={event.category}
              data-title={event.title.toLowerCase()}
              data-time={event.time}
              data-original-time={event.time}
              data-day={dayName}
            >
              <!-- Efecto de brillo animado -->
              <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000 ease-out"></div>
              
              <!-- Header mejorado con gradiente dinámico -->
              <div class={`relative bg-gradient-to-r ${category.color} p-4 overflow-hidden`}>
                <!-- Patrón de fondo sutil -->
                <div class="absolute inset-0 opacity-20">
                  <div class="absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.1),transparent_50%)]"></div>
                </div>
                
                <div class="relative flex items-center justify-between">
                  <div class="flex items-center gap-3">
                    <span class="text-3xl drop-shadow-lg animate-pulse">{category.icon}</span>
                    <div>
                      <div class="text-xs font-bold text-white/90 uppercase tracking-wider">
                        {event.category || 'LIVE'}
                      </div>
                      <div class="text-xs text-white/70 flex items-center gap-1">
                        <span class="w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                        EN VIVO
                      </div>
                    </div>
                  </div>
                  
                  <!-- Indicador de calidad -->
                  <div class="bg-black/30 backdrop-blur-sm px-3 py-1 rounded-full border border-white/20">
                    <span class="text-xs font-bold text-white">HD</span>
                  </div>
                </div>
              </div>
              
              <!-- Contenido principal mejorado -->
              <div class="p-6 space-y-4">
                <!-- Tiempo y estado -->
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2 bg-blue-500/10 px-3 py-1 rounded-full border border-blue-500/30">
                  
                    <span class="text-sm font-semibold text-blue-300 event-time">{event.time}</span>
                  </div>
                  
                  <div class="flex items-center gap-2">
                    <div class="w-2 h-2 bg-green-400 rounded-full animate-ping"></div>
                    <span class="text-xs text-green-400 font-medium">ACTIVO</span>
                  </div>
                </div>
                
                <!-- Título mejorado -->
                <div>
                  <h3 class="text-lg font-bold text-white mb-2 line-clamp-2 group-hover:text-blue-300 transition-colors duration-00">
                    {event.title}
                  </h3>
                  
                 
                </div>
                
                <!-- Sección de canales mejorada -->
                <div class="space-y-3">
                  <div class="flex items-center justify-between">
                    <h4 class="text-sm font-semibold text-gray-300 flex items-center gap-2">
                      <span class="text-purple-400">📺</span>
                      Canales ({event.channels?.length || 1})
                    </h4>
                    <span class="text-xs text-gray-500 bg-gray-800/50 px-2 py-1 rounded-full">
                      Seleccionar
                    </span>
                  </div>
                  
                  <div class="space-y-2 max-h-40 overflow-y-auto custom-scrollbar">
                    {event.channels ? event.channels.map((channel: { id: any; name: unknown; country: unknown; language: unknown; quality: unknown; }, index: any) => (
                      <button 
                        class="channel-btn w-full bg-gray-800/30 hover:bg-gradient-to-r hover:from-blue-600/20 hover:to-purple-600/20 border border-gray-600/30 hover:border-blue-500/50 rounded-xl p-3 text-left transition-all duration-300 group/channel backdrop-blur-sm"
                        data-channel-id={channel.id}
                        data-event-title={event.title}
                        data-event-category={event.category}
                      >
                        <div class="flex items-center justify-between">
                          <div class="flex-1 space-y-1">
                            <div class="flex items-center gap-2">
                              <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                              <span class="text-sm font-medium text-white group-hover/channel:text-blue-300 transition-colors">
                                {channel.name}
                              </span>
                            </div>
                            <div class="flex items-center gap-3 text-xs text-gray-400">
                              <span class="flex items-center gap-1">
                                <span>🌍</span>
                                {channel.country}
                              </span>
                              <span class="flex items-center gap-1">
                                <span>🗣️</span>
                                {channel.language}
                              </span>
                              <span class="flex items-center gap-1 text-green-400 font-medium">
                                <span>📺</span>
                                {channel.quality}
                              </span>
                            </div>
                          </div>
                          <div class="flex items-center gap-2">
                            <div class="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center group-hover/channel:bg-blue-500/40 transition-colors">
                              <span class="text-blue-400 text-sm">▶</span>
                            </div>
                          </div>
                        </div>
                      </button>
                    )) : (
                      <button 
                        class="channel-btn w-full bg-gray-800/30 hover:bg-gradient-to-r hover:from-blue-600/20 hover:to-purple-600/20 border border-gray-600/30 hover:border-blue-500/50 rounded-xl p-3 text-left transition-all duration-300 group/channel backdrop-blur-sm"
                        data-channel-id={event.channelId}
                        data-event-title={event.title}
                        data-event-category={event.category}
                      >
                        <div class="flex items-center justify-between">
                          <div class="flex-1 space-y-1">
                            <div class="flex items-center gap-2">
                              <span class="w-2 h-2 bg-green-400 rounded-full"></span>
                              <span class="text-sm font-medium text-white group-hover/channel:text-blue-300 transition-colors">
                                Canal Principal
                              </span>
                            </div>
                            <div class="flex items-center gap-3 text-xs text-gray-400">
                              <span class="flex items-center gap-1">
                                <span>🌍</span>
                                Internacional
                              </span>
                              <span class="flex items-center gap-1">
                                <span>🗣️</span>
                                Multi
                              </span>
                              <span class="flex items-center gap-1 text-green-400 font-medium">
                                <span>📺</span>
                                HD
                              </span>
                            </div>
                          </div>
                          <div class="flex items-center gap-2">
                            <div class="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center group-hover/channel:bg-blue-500/40 transition-colors">
                              <span class="text-blue-400 text-sm">▶</span>
                            </div>
                          </div>
                        </div>
                      </button>
                    )}
                  </div>
                </div>
                
                <!-- Footer de la tarjeta -->
                <div class="pt-3 border-t border-gray-700/50">
                  <div class="flex items-center justify-between text-xs text-gray-500">
                    <span class="flex items-center gap-1">
                      <span>🔒</span>
                      Conexión segura
                    </span>
                    <span class="flex items-center gap-1">
                      <span>⚡</span>
                      Carga rápida
                    </span>
                  </div>
                </div>
              </div>
              
              <!-- Efecto de hover mejorado -->
              <div class="absolute inset-0 bg-gradient-to-br from-blue-500/5 via-purple-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none"></div>
              
              <!-- Borde brillante en hover -->
              <div class="absolute inset-0 rounded-2xl border-2 border-transparent group-hover:border-gradient-to-r group-hover:from-blue-500/50 group-hover:to-purple-500/50 transition-all duration-500 pointer-events-none"></div>
            </div>
          );
        })}
      </div>
    </div>
  )})}

  <!-- Mensaje cuando no hay resultados -->
  <div id="noResults" class="hidden text-center py-12">
    <div class="text-6xl mb-4">🔍</div>
    <h3 class="text-2xl font-semibold text-gray-300 mb-2">No se encontraron eventos</h3>
    <p class="text-gray-500">Intenta con otros términos de búsqueda o filtros</p>
  </div>

  <!-- Footer con información -->
  <div class="text-center mt-16 text-gray-500">
    <p class="text-sm">
      🔒 Conexión segura • 🚫 Sin anuncios • ⚡ Carga instantánea
    </p>
  </div>
</div>

<script is:inline>
  // Verificar disponibilidad de electronAPI al cargar
  document.addEventListener('DOMContentLoaded', () => {
    // Verificar electronAPI con timeout
    const checkElectronAPI = () => {
      if (typeof window !== 'undefined' && window.electronAPI) {
        console.log('✅ electronAPI está disponible:', Object.keys(window.electronAPI));
      } else {
        console.log('❌ electronAPI no está disponible, reintentando...');
        setTimeout(checkElectronAPI, 500);
      }
    };
    
    checkElectronAPI();
    
    // Funcionalidad de búsqueda y filtros
    const searchInput = document.getElementById('searchInput');
    const filterBtns = document.querySelectorAll('.filter-btn');
    const eventCards = document.querySelectorAll('.event-card');
    const daySections = document.querySelectorAll('.day-section');
    const resultsCount = document.getElementById('resultsCount');
    const totalEvents = document.getElementById('totalEvents');
    const noResults = document.getElementById('noResults');
    const timezoneSelect = document.getElementById('timezoneSelect');
    
    let currentFilter = 'all';
    let currentSearch = '';
    let currentDay = 'all';
    let currentTimezone = 'Europe/London';

    // Detectar zona horaria del usuario automáticamente
    const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;
    if (timezoneSelect) {
      // Buscar si la zona horaria del usuario está en las opciones
      const options = Array.from(timezoneSelect.options);
      const userOption = options.find(option => option.value === userTimezone);
      if (userOption) {
        timezoneSelect.value = userTimezone;
        currentTimezone = userTimezone;
      } else {
        // Si no está, agregar la zona horaria del usuario
        const option = document.createElement('option');
        option.value = userTimezone;
        option.textContent = `🌍 ${userTimezone.replace('_', ' ')}`;
        timezoneSelect.appendChild(option);
        timezoneSelect.value = userTimezone;
        currentTimezone = userTimezone;
      }
    }

    // Función para convertir horario GMT a zona horaria seleccionada
    function convertTime(gmtTimeString, targetTimezone) {
      try {
        // Crear fecha base (hoy) con la hora GMT
        const today = new Date();
        const [hours, minutes] = gmtTimeString.split(':').map(Number);
        
        // Crear fecha GMT
        const gmtDate = new Date(Date.UTC(
          today.getUTCFullYear(),
          today.getUTCMonth(),
          today.getUTCDate(),
          hours,
          minutes
        ));
        
        // Convertir a zona horaria objetivo
        const convertedTime = gmtDate.toLocaleTimeString('es-ES', {
          timeZone: targetTimezone,
          hour: '2-digit',
          minute: '2-digit',
          hour12: false
        });
        
        return convertedTime;
      } catch (error) {
        console.error('Error converting time:', error);
        return gmtTimeString; // Retornar hora original si hay error
      }
    }

    // Función para actualizar todos los horarios
    function updateAllTimes() {
      eventCards.forEach(card => {
        if (card && card.nodeType === Node.ELEMENT_NODE) {
          const originalTime = card.getAttribute('data-original-time');
          const timeElement = card.querySelector('.event-time');
          
          if (originalTime && timeElement) {
            const convertedTime = convertTime(originalTime, currentTimezone);
            timeElement.textContent = `🕐 ${convertedTime}`;
            card.setAttribute('data-time', convertedTime);
          }
        }
      });
    }

    // Event listener para cambio de zona horaria
    if (timezoneSelect) {
      timezoneSelect.addEventListener('change', (e) => {
        if (e.target && e.target.value) {
          currentTimezone = e.target.value;
          updateAllTimes();
        }
      });
    }

    // Actualizar horarios al cargar la página
    updateAllTimes();

    // Funcionalidad para toggle de filtros
    const toggleFiltersBtn = document.getElementById('toggleFilters');
    const filtersContent = document.getElementById('filtersContent');
    const filterToggleText = document.getElementById('filterToggleText');
    const filterToggleIcon = document.getElementById('filterToggleIcon');
    
    if (toggleFiltersBtn && filtersContent && filterToggleText && filterToggleIcon) {
      toggleFiltersBtn.addEventListener('click', () => {
        const isHidden = filtersContent.style.display === 'none';
        
        if (isHidden) {
          // Mostrar filtros
          filtersContent.style.display = 'block';
          filterToggleText.textContent = 'Ocultar';
          filterToggleIcon.textContent = '▲';
          filterToggleIcon.style.transform = 'rotate(0deg)';
        } else {
          // Ocultar filtros
          filtersContent.style.display = 'none';
          filterToggleText.textContent = 'Mostrar';
          filterToggleIcon.textContent = '▼';
          filterToggleIcon.style.transform = 'rotate(180deg)';
        }
      });
    }

    // Función para filtrar eventos
    function filterEvents() {
      let visibleCount = 0;
      let visibleDays = 0;
      
      daySections.forEach(daySection => {
        if (daySection && daySection.nodeType === Node.ELEMENT_NODE) {
          const dayName = daySection.getAttribute('data-day') || '';
          const dayCards = daySection.querySelectorAll('.event-card');
          let dayVisibleCount = 0;
          
          // Verificar si el día debe mostrarse
          const dayMatches = currentDay === 'all' || dayName === currentDay;
          
          if (dayMatches) {
            dayCards.forEach(card => {
              if (card && card.nodeType === Node.ELEMENT_NODE) {
                const category = card.getAttribute('data-category') || '';
                const title = card.getAttribute('data-title') || '';
                const time = card.getAttribute('data-time') || '';
                
                const matchesFilter = currentFilter === 'all' || category === currentFilter;
                const matchesSearch = currentSearch === '' || 
                  title.includes(currentSearch.toLowerCase()) || 
                  time.includes(currentSearch) ||
                  category.toLowerCase().includes(currentSearch.toLowerCase());
                
                if (matchesFilter && matchesSearch) {
                  card.style.display = 'block';
                  visibleCount++;
                  dayVisibleCount++;
                } else {
                  card.style.display = 'none';
                }
              }
            });
          } else {
            // Ocultar todas las tarjetas del día si no coincide con el filtro de día
            dayCards.forEach(card => {
              if (card && card.nodeType === Node.ELEMENT_NODE) {
                card.style.display = 'none';
              }
            });
          }
          
          // Mostrar/ocultar sección del día
          if (dayVisibleCount > 0 && dayMatches) {
            daySection.style.display = 'block';
            visibleDays++;
          } else {
            daySection.style.display = 'none';
          }
        }
      });
      
      // Actualizar contador
      if (resultsCount) resultsCount.textContent = visibleCount.toString();
      if (totalEvents) totalEvents.textContent = visibleCount.toString();
      
      // Mostrar/ocultar mensaje de no resultados
      if (visibleCount === 0) {
        if (noResults) noResults.classList.remove('hidden');
      } else {
        if (noResults) noResults.classList.add('hidden');
      }
    }

    // Event listener para búsqueda
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        if (e.target && e.target.value !== undefined) {
          currentSearch = e.target.value;
          filterEvents();
        }
      });
    }

    // Event listeners para filtros de día
    const dayFilterBtns = document.querySelectorAll('.day-filter-btn');
    dayFilterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        // Remover clase active de todos los botones de día
        dayFilterBtns.forEach(b => {
          b.classList.remove('active', 'bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
          b.classList.add('bg-gray-700/50');
        });
        
        // Agregar clase active al botón clickeado
        btn.classList.add('active', 'bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
        btn.classList.remove('bg-gray-700/50');
        
        currentDay = btn.getAttribute('data-day') || 'all';
        filterEvents();
      });
    });

    // Event listeners para filtros de categoría
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        // Remover clase active de todos los botones
        filterBtns.forEach(b => {
          b.classList.remove('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
          b.classList.add('bg-gray-700/50');
        });
        
        // Agregar clase active al botón clickeado
        btn.classList.add('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
        btn.classList.remove('bg-gray-700/50');
        
        currentFilter = btn.getAttribute('data-category') || 'all';
        filterEvents();
      });
    });

    // Funcionalidad de click en canales - ACTUALIZADA
    const channelBtns = document.querySelectorAll('.channel-btn');
    channelBtns.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const channelId = btn.getAttribute('data-channel-id');
        const eventTitle = btn.getAttribute('data-event-title');
        
        if (channelId) {
          console.log(`Reproduciendo: ${eventTitle} - Canal ${channelId}`);
          
          if (typeof window !== 'undefined' && window.electronAPI) {
            // Abrir directamente la ventana del canal
            openChannelWindow(channelId, eventTitle);
          } else {
            console.log('Cargando canal:', channelId);
          }
        }
      });
    });



    // Gestión de ventanas
    async function updateWindowsList() {
      if (typeof window !== 'undefined' && window.electronAPI) {
        try {
          const result = await window.electronAPI.listWindows();
          const windowsList = document.getElementById('windowsList');
          
          if (windowsList && result.success && result.windows.length > 0) {
            windowsList.innerHTML = result.windows.map(win => `
              <div class="flex items-center justify-between bg-gray-700/30 p-3 rounded-lg">
                <span class="text-sm text-gray-300">${win.title}</span>
                <div class="flex gap-2">
                  <button 
                    class="focus-window-btn bg-blue-600/50 hover:bg-blue-500/50 px-2 py-1 rounded text-xs"
                    data-window-id="${win.id}"
                  >
                    👁️ Enfocar
                  </button>
                  <button 
                    class="close-window-btn bg-red-600/50 hover:bg-red-500/50 px-2 py-1 rounded text-xs"
                    data-window-id="${win.id}"
                  >
                    ❌ Cerrar
                  </button>
                </div>
              </div>
            `).join('');
            
            // Agregar event listeners a los botones
            document.querySelectorAll('.focus-window-btn').forEach(btn => {
              btn.addEventListener('click', async () => {
                const windowId = btn.getAttribute('data-window-id');
                await window.electronAPI.focusWindow(windowId);
              });
            });
            
            document.querySelectorAll('.close-window-btn').forEach(btn => {
              btn.addEventListener('click', async () => {
                const windowId = btn.getAttribute('data-window-id');
                await window.electronAPI.closeWindow(windowId);
                updateWindowsList();
              });
            });
            
          } else if (windowsList) {
            windowsList.innerHTML = '<p class="text-gray-400 text-sm">No hay ventanas abiertas</p>';
          }
        } catch (error) {
          console.error('Error actualizando lista de ventanas:', error);
        }
      }
    }

    // Event listeners para gestión de ventanas
    const refreshBtn = document.getElementById('refreshWindowsList');
    if (refreshBtn) {
      refreshBtn.addEventListener('click', updateWindowsList);
    }
    
    const closeAllBtn = document.getElementById('closeAllWindows');
    if (closeAllBtn) {
      closeAllBtn.addEventListener('click', async () => {
        if (typeof window !== 'undefined' && window.electronAPI) {
          await window.electronAPI.closeAllWindows();
          updateWindowsList();
        }
      });
    }

    // Actualizar lista al cargar
    updateWindowsList();
    
    // Actualizar lista cada 5 segundos
    setInterval(updateWindowsList, 5000);

    // Event listener para el botón de limpiar filtros
    const clearFiltersBtn = document.getElementById('clearFilters');
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', () => {
        // Resetear búsqueda
        currentSearch = '';
        if (searchInput) {
          searchInput.value = '';
        }
        
        // Resetear filtro de categoría
        currentFilter = 'all';
        filterBtns.forEach(btn => {
          btn.classList.remove('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
          btn.classList.add('bg-gray-700/50');
          if (btn.getAttribute('data-category') === 'all') {
            btn.classList.add('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
            btn.classList.remove('bg-gray-700/50');
          }
        });
        
        // Resetear filtro de día
        currentDay = 'all';
        const dayFilterBtns = document.querySelectorAll('.day-filter-btn');
        dayFilterBtns.forEach(btn => {
          btn.classList.remove('active', 'bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
          btn.classList.add('bg-gray-700/50');
          if (btn.getAttribute('data-day') === 'all') {
            btn.classList.add('active', 'bg-gradient-to-r', 'from-green-500', 'to-emerald-600');
            btn.classList.remove('bg-gray-700/50');
          }
        });
        
        // Aplicar filtros (mostrar todos)
        filterEvents();
      });
    }

    // Variable para el modo de reproductor
    let isMultiPlayerMode = true;
    
    // Variable para prevenir múltiples clics
    let isProcessingClick = false;
    
    // Inicializar el toggle
    function initializePlayerModeToggle() {
      const toggle = document.getElementById('multiPlayerToggle');
      if (toggle) {
        // Cargar preferencia guardada
        const savedMode = localStorage.getItem('playerMode');
        if (savedMode !== null) {
          isMultiPlayerMode = savedMode === 'multi';
          toggle.checked = isMultiPlayerMode;
        }
        
        // Event listener para cambios
        toggle.addEventListener('change', (e) => {
          isMultiPlayerMode = e.target.checked;
          localStorage.setItem('playerMode', isMultiPlayerMode ? 'multi' : 'single');
          
          console.log('Modo cambiado a:', isMultiPlayerMode ? 'Multi-reproductor' : 'Reproductor único');
          
          // Mostrar notificación visual
          showModeNotification(isMultiPlayerMode);
        });
      }
    }
    
    // Función para mostrar notificación del cambio de modo
    function showModeNotification(isMulti) {
      const notification = document.createElement('div');
      notification.className = `fixed top-4 right-4 z-50 px-4 py-2 rounded-lg text-white font-medium transition-all duration-300 ${
        isMulti ? 'bg-gradient-to-r from-blue-500 to-purple-600' : 'bg-gradient-to-r from-green-500 to-emerald-600'
      }`;
      notification.textContent = isMulti ? '🎬 Modo Multi-reproductor activado' : '📺 Modo Reproductor único activado';
      
      document.body.appendChild(notification);
      
      // Animar entrada
      setTimeout(() => {
        notification.style.transform = 'translateX(0)';
        notification.style.opacity = '1';
      }, 100);
      
      // Remover después de 3 segundos
      setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        notification.style.opacity = '0';
        setTimeout(() => {
          if (notification.parentNode) {
            notification.parentNode.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
    
    // Re-agregar event listeners para botones de canal (después de que el DOM esté listo)
    function addChannelListeners() {
      const channelBtns = document.querySelectorAll('.channel-btn');
      channelBtns.forEach(btn => {
        // Verificar si ya tiene el listener para evitar duplicados
        if (!btn.hasAttribute('data-listener-added')) {
          btn.addEventListener('click', handleChannelClick);
          btn.setAttribute('data-listener-added', 'true');
        }
      });
    }
    
    function handleChannelClick(e) {
      e.stopPropagation();
      
      // Prevenir múltiples clics
      if (isProcessingClick) {
        console.log('Click ya en proceso, ignorando...');
        return;
      }
      
      const channelId = this.getAttribute('data-channel-id');
      const eventTitle = this.getAttribute('data-event-title');
      
      if (channelId) {
        console.log(`Reproduciendo: ${eventTitle} - Canal ${channelId}`);
        
        if (typeof window !== 'undefined' && window.electronAPI) {
          // Verificar si el canal ya está abierto y enfocarlo, o abrir nueva ventana
          openChannelWindow(channelId, eventTitle);
        } else {
          console.log('Cargando canal:', channelId);
        }
      }
    }
    
    // Nueva función para manejar la apertura de canales
    async function openChannelWindow(channelId, eventTitle) {
      if (isProcessingClick) {
        console.log('Ya procesando apertura de canal, ignorando...');
        return;
      }
      
      isProcessingClick = true;
      
      try {
        console.log('Intentando abrir canal:', channelId, 'Título:', eventTitle, 'Modo:', isMultiPlayerMode ? 'Multi' : 'Único');
        
        if (isMultiPlayerMode) {
          // MODO MULTI-REPRODUCTOR: Verificar si ya existe y enfocar, o crear nueva ventana
          const windowsResult = await window.electronAPI.listWindows();
          
          if (windowsResult.success && windowsResult.windows.length > 0) {
            const existingWindow = windowsResult.windows.find(win => {
              const winId = win.id.toLowerCase();
              const winTitle = win.title.toLowerCase();
              const targetChannel = `channel_${channelId}`.toLowerCase();
              const targetStream = `stream-${channelId}`.toLowerCase();
              
              return winId.includes(targetChannel) || 
                     winTitle.includes(targetStream) ||
                     winId === targetChannel;
            });
            
            if (existingWindow) {
              console.log('Canal ya abierto, enfocando ventana existente:', existingWindow.id);
              await window.electronAPI.focusWindow(existingWindow.id);
              return;
            }
          }
          
          // Si no existe, abrir nueva ventana con título personalizado
          console.log('Abriendo nueva ventana para:', eventTitle);
          const result = await window.electronAPI.openNewWindow(channelId, { title: eventTitle });
          
          if (result && result.success) {
            console.log('Nueva ventana abierta exitosamente:', result);
          } else {
            console.error('Error al abrir nueva ventana:', result);
          }
        } else {
          // MODO REPRODUCTOR ÚNICO: Siempre usar la misma ventana, reemplazando contenido
          console.log('Modo reproductor único: verificando ventanas existentes...');
          
          const windowsResult = await window.electronAPI.listWindows();
          
          if (windowsResult.success && windowsResult.windows.length > 0) {
            // Si hay ventanas abiertas, usar la primera para reemplazar el contenido
            const firstWindow = windowsResult.windows[0];
            console.log('Reemplazando contenido en ventana existente con:', eventTitle);
            
            // Cargar el nuevo canal en la ventana existente
            const result = await window.electronAPI.loadStream(channelId, { 
              newWindow: false, 
              replaceWindow: firstWindow.id,
              title: eventTitle
            });
            
            if (result && result.success) {
              console.log('Canal reemplazado en ventana existente:', result);
              // Enfocar la ventana
              await window.electronAPI.focusWindow(firstWindow.id);
            } else {
              console.error('Error al reemplazar canal:', result);
            }
          } else {
            // Si no hay ventanas, crear una nueva (será la única)
            console.log('No hay ventanas, creando primera ventana para:', eventTitle);
            const result = await window.electronAPI.openNewWindow(channelId, { title: eventTitle });
            
            if (result && result.success) {
              console.log('Primera ventana creada para modo único:', result);
            } else {
              console.error('Error al crear primera ventana:', result);
            }
          }
        }
        
        // Actualizar lista de ventanas
        updateWindowsList();
        
      } catch (error) {
        console.error('Error al abrir canal:', error);
      } finally {
        // Liberar el lock después de un pequeño delay
        setTimeout(() => {
          isProcessingClick = false;
        }, 1000);
      }
    }
    
    // Inicializar todo
    initializePlayerModeToggle();
    addChannelListeners();
    
    // Modificar la función filterEvents para evitar múltiples listeners
    const originalFilterEvents = filterEvents;
    filterEvents = function() {
      originalFilterEvents();
      // Solo re-agregar listeners si hay nuevos elementos
      setTimeout(() => {
        const channelBtns = document.querySelectorAll('.channel-btn:not([data-listener-added])');
        if (channelBtns.length > 0) {
          addChannelListeners();
        }
      }, 100);
    };

    // Funcionalidad para filtros rápidos
    const quickFilters = document.querySelectorAll('.quick-filter');
    quickFilters.forEach(filter => {
      filter.addEventListener('click', () => {
        const categories = filter.getAttribute('data-categories');
        const timeFilter = filter.getAttribute('data-time');
        
        if (categories) {
          // Filtro por categorías múltiples
          const categoryList = JSON.parse(categories);
          // Por simplicidad, seleccionar la primera categoría
          if (categoryList.length > 0) {
            currentFilter = categoryList[0];
            
            // Actualizar botones
            filterBtns.forEach(btn => {
              btn.classList.remove('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
              btn.classList.add('bg-gray-700/50');
              if (btn.getAttribute('data-category') === currentFilter) {
                btn.classList.add('active', 'bg-gradient-to-r', 'from-blue-500', 'to-purple-600');
                btn.classList.remove('bg-gray-700/50');
              }
            });
            
            filterEvents();
          }
        }
        
        if (timeFilter === 'now') {
          // Filtro por eventos en vivo (implementar lógica según necesidades)
          console.log('Filtrar eventos en vivo');
        }
      });
    });
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .day-filter-btn.active {
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.5);
  }
  
  .filter-btn.active {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.5);
  }
  
  .glow {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }
  
  .glow-green {
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.3);
  }
  
  .glow-purple {
    box-shadow: 0 0 20px rgba(147, 51, 234, 0.3);
  }
  
  .glow-purple {
    box-shadow: 0 0 20px rgba(168, 85, 247, 0.3);
  }
  
  /* Scrollbar personalizado */
  .custom-scrollbar::-webkit-scrollbar {
    width: 4px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(55, 65, 81, 0.3);
    border-radius: 2px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(59, 130, 246, 0.5);
    border-radius: 2px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(59, 130, 246, 0.7);
  }
  
  /* Animaciones mejoradas */
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  .event-card {
    position: relative;
    overflow: hidden;
  }
  
  .event-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    transition: left 0.5s;
    z-index: 1;
  }
  
  .event-card:hover::before {
    left: 100%;
  }
  
  /* Efecto de gradiente en bordes */
  .border-gradient {
    background: linear-gradient(45deg, #3b82f6, #8b5cf6, #ec4899);
    background-size: 300% 300%;
    animation: gradient-shift 3s ease infinite;
  }
  
  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  /* Mejoras responsivas */
  @media (max-width: 768px) {
    .event-card {
      transform: none !important;
    }
    
    .event-card:hover {
      transform: translateY(-2px) !important;
    }
  }
</style>